/ *! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js * /
"document" dans  self && ( "classList" dans le  document . createElement ( "_" ) && ( ! document . createElementNS || "classList" dans le  document . createElementNS ( "http://www.w3.org/2000/svg" , "g" ) ) || ! function ( t ) { "use strict" ; if ( "Element"en  t ) { var  e= "classList" , n = "prototype" , i = t . Élément [ n ] , s = objet , r = chaîne [ n ] . garniture || function ( ) { retourne  ceci . replace ( / ^ \ s + | \ s + $ / g , "" ) } , o = Array [n ] . indexOf || fonction ( t ) { for ( var  e = 0 , n = this . length ; n > e ; e ++ ) if ( e  in  this && this [ e ] === t ) return  e ; return - 1 } , c = fonction ( t ,e ) { ceci . nom = t , ceci . code = DOMException [ t ] , ceci . message = e } , a = fonction ( t , e ) { if ( "" === e ) lance un  nouveau  c ( "SYNTAX_ERR" , "Le jeton ne doit pas être vide." ) ; si ( / \ s /. test ( e ) ) throw  new  c ( "INVALID_CHARACTER_ERR" , "Le jeton ne doit pas contenir d'espaces." ) ; retour  o . call ( t , e ) } , l = function ( t ) { for ( var  e = r . call ( t . getAttribute ( "class" ) || "" ) , n= e ? e . split ( / \ s + / ) : [ ] , i = 0 , s = n . longueur ; s > i ; i ++ ) ceci . pousser ( n [ i ] ) ; ça . _updateClassName = fonction ( ) { t . setAttribute ( "class" ,ça . toString ( ) ) } } , u = l [ n ] = [ ] , h = function ( ) { return  new  l ( this ) } ; if ( c [ n ] = Error [ n ] , u . item = function ( t ) { return  this [t ] || null } , u . contient = function ( t ) { return ~ a ( this , t + "" ) } , u . add = fonction ( ) { var  t , e = arguments , n = 0 , i = e . longueur , s = ! 1 ;do  t = e [ n ] + "" , ~ a ( this , t ) || ( this . push ( t ) , s = ! 0 ) ; tandis que ( ++ n < i ) ; s && ceci . _updateClassName ( ) } , u . remove = function ( ) {var  t , e , n = arguments , i = 0 , s = n . longueur , r = ! 1 ; faire  pour ( t = n [ i ] + "" , e = a ( this , t ) ; ~ e ; ) this . épissure ( e , 1 ) , r= ! 0 , e = a ( ce , t ) ; tandis que ( ++ i < s ) ; r && cela . _updateClassName ( ) } , u . toggle = fonction ( t , e ) { var  n = this . contient ( t ) , i = n ? e ! ==!0 && "supprimer" : e ! ==! 1 && "ajouter" ; retourne  i && this [ i ] ( t ) , e === ! 0 || e === ! 1 ? e :! n } , u . replace = fonction ( t , e ) { var  n = a ( t + "" ) ; ~n && ( ce . épissure ( n , 1 , e ) , ce . _updateClassName ( ) ) } , u . toString = function ( ) { retourne  ceci . joindre ( "" ) } , art . DefineProperty ) { var  f = { obtenir : h , dénombrable : 0, configurable :! 0 } ; essayez { s . defineProperty ( i , e , f ) } catch ( p ) { void  0 ! == p . nombre && - 2146823252 ! == p . nombre || ( f . énumérable = ! 1 , s . defineProperty ( i , e , f) ) } } else  s [ n ] . __defineGetter__ && i . __defineGetter__ ( e , h ) } } ( self ) , function ( ) { "use strict" ; var  t = document . createElement ( "_" ) ; if ( t . classList . add ( "c1" , "c2" ), ! t . classList . contient ( "c2" ) ) { var  e = fonction ( t ) { var  e = DOMTokenList . prototype [ t ] ; DOMTokenList . prototype [ t ] = fonction ( t ) { var  n , i = arguments . longueur ; pour ( n= 0 ; i > n ; n ++ ) t = arguments [ n ] , e . call ( this , t ) } } ; e ( "add" ) , e ( "supprimer" ) } si ( t . classList . bascule ( "c3" , ! 1 ) , t . classList . contient( "c3" ) ) { var  n = DOMTokenList . prototype . basculer ; DOMTokenList . prototype . toggle = fonction ( t , e ) { retourne  1  dans les  arguments && ! ça . contient ( t ) == ! e ? e : n . appeler ( this , t ) }} "remplacer" dans le  document . createElement ( "_" ) . classList || ( DOMTokenList . Prototype . Remplacer = fonction ( t , e ) { var  n = ce . ToString ( ) . Scission ( "" ) , i = n . IndexOf ( t + "" ) ; ~ i &&( n = n . tranche ( i ) , ceci . supprimer . appliquer ( ceci , n ) , ceci . ajouter ( e ) , ceci . ajouter . appliquer ( ceci , n . tranche ( 1 ) ) ) } ) , t = null } ( ) ) ;
